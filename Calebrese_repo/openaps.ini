[device "black"]
serial = 665455
minutes = 3
vendor = openaps.vendors.medtronic
model = 
expires = 2015-10-13T11:34:15.189278

[device "cgm"]
vendor = openaps.vendors.dexcom

[report "glucose.txt"]
device = cgm
use = iter_glucose
reporter = text
count = 100

[report "glucose.json"]
device = cgm
use = iter_glucose
reporter = JSON
count = 100

[report "medtronic-cgm.json"]
device = pump
use = read_glucose_data
reporter = JSON
page = 127

[report "temp-basal-results.json"]
device = pump
input = request-temp.json
use = set_temp_basal
reporter = JSON

[vendor "openapscontrib.agp"]
path = .
module = openapscontrib.agp

[report "iob.json"]
device = calciob
input = pump-history.json
use = shell
reporter = text

[device "my-agp"]
vendor = openapscontrib.agp

[vendor "openapscontrib.plugins"]
path = .
module = openapscontrib.plugins

[device "plugins"]
vendor = openapscontrib.plugins

[alias]
get = report invoke monitor/clock.json monitor/pump-history.json monitor/pump-history-zoned.json monitor/active-basal-profile.json monitor/reservoir.json monitor/settings.json monitor/status.json monitor/battery.json monitor/bg-targets.json monitor/insulin-sensitivities.json monitor/carb-ratios.json monitor/temp-basal-status.json reporting/latest-treatments.json
invoke = report invoke
mm-prepare = report invoke 01.prepare/mm-cleaned.json 01.prepare/mm-reconciled.json 01.prepare/mm-resolved.json 01.prepare/mm-normalized.json 01.prepare/mm-resolved-zoned.json
oref0-predict = report invoke oref0-predict/profile.json oref0-predict/iob.json oref0-predict/oref0.json
curl = bewest.labs.diabetes.watch/api/v1/entries.json?type=sgv
ns-glucose = ! (curl -s bewest.labs.diabetes.watch/api/v1/entries.json"?type=sgv" | json   -e "this.glucose = this.sgv"  )
get-ns-glucose = report invoke monitor/glucose.json
get-share-glucose = report invoke monitor/share-glucose.json monitor/share-glucose-zoned.json monitor/glucose.json
gather-data = ! bash -c "openaps get-share-glucose && openaps get"
gather-ns-data = ! bash -c "openaps get-ns-glucose && openaps get"
gather-share-data = ! bash -c "openaps get-share-glucose && openaps get"
preflight = ! bash -c "rm  -f model.json &&  openaps report invoke model.json && test -n $(json -f model.json) && echo \"PREFLIGHT OK\" || ( mm-stick warmup fail 'NO PUMP MODEL RESPONDED' || mm-stick fail 'NO MEDTRONIC CARELINK STICK AVAILABLE')"
analyze-and-predict = ! bash -c "openaps mm-prepare && openaps oref0-predict"
gather-and-predict = ! bash -c "openaps gather-data && openaps analyze-and-predict"
enact = report invoke oref0-predict/enacted.json
do-everything = ! bash -c "openaps preflight && (test -n \"$(json -f model.json)\" && openaps gather-and-predict && openaps check-recommendation-and-enact || echo "Upload?") && openaps upload-recent-treatments"
check-recommendation = ! bash -c "json -f oref0-predict/oref0.json && test -n \"$(json -f oref0-predict/oref0.json duration)\" && (echo \"OK\" ) || echo \"No recommendation to send\""
check-recommendation-and-enact = ! bash -c "json -f oref0-predict/oref0.json && test -n \"$(json -f oref0-predict/oref0.json duration rate | tr -d ' ')\" && (echo \"OK\" && openaps enact ) || echo \"No recommendation to send\""
fetch-model = use pump model
latest-ns-treatment-time = ! bash -c "openaps use latest-treatments shell |json created_at"
format-latest-nightscout-treatments = ! bash -c "( echo '\"'$(openaps latest-ns-treatment-time )'\"' | tee reporting/ns-latest-treatments.json ) && nightscout cull-latest-openaps-treatments monitor/pump-history-zoned.json reporting/ns-latest-treatments.json"
upload-recent-treatments = ! bash -c "test $(json -f reporting/latest-treatments.json -a created_at eventType | wc -l ) -gt 0 && (openaps use  ns-upload shell treatments.json reporting/latest-treatments.json     )  || echo \"No recent treatments to upload\""

[vendor "openapscontrib.mmhistorytools"]
path = .
module = openapscontrib.mmhistorytools

[device "munge"]
vendor = openapscontrib.mmhistorytools

[report "monitor/pump-history.json"]
device = pump
hours = 8
use = iter_pump_hours
reporter = JSON

[report "monitor/clock.json"]
device = pump
use = read_clock
reporter = JSON

[report "monitor/temp-basal-status.json"]
device = pump
use = read_temp_basal
reporter = JSON

[report "monitor/active-basal-profile.json"]
device = pump
use = read_selected_basal_profile
reporter = JSON

[report "monitor/reservoir.json"]
device = pump
use = reservoir
reporter = JSON

[report "monitor/settings.json"]
device = pump
use = settings
reporter = JSON

[report "monitor/status.json"]
device = pump
use = read_status
reporter = JSON

[report "monitor/battery.json"]
device = pump
use = read_battery_status
reporter = JSON

[report "monitor/bg-targets.json"]
device = pump
use = read_bg_targets
reporter = JSON

[report "monitor/insulin-sensitivities.json"]
device = pump
use = read_insulin_sensitivities
reporter = JSON

[report "monitor/carb-ratios.json"]
device = pump
use = read_carb_ratios
reporter = JSON

[device "mine"]
fields = 
cmd = node
vendor = openaps.vendors.process
args = /usr/local/bin/calculate-iob

[device "iob"]
fields = history profile clock
cmd = /usr/local/bin/oref0
vendor = openaps.vendors.process
args = calculate-iob

[report "01.prepare/mm-cleaned.json"]
device = munge
use = clean
infile = monitor/pump-history.json
reporter = JSON

[report "01.prepare/mm-reconciled.json"]
device = munge
use = reconcile
infile = ./01.prepare/mm-cleaned.json
reporter = JSON

[report "01.prepare/mm-resolved.json"]
device = munge
use = resolve
infile = ./01.prepare/mm-reconciled.json
reporter = JSON

[report "01.prepare/mm-normalized.json"]
use = normalize
reporter = JSON
basal_profile = monitor/active-basal-profile.json
zero_at = monitor/clock.json
device = munge
infile = 01.prepare/mm-resolved.json

[report "oref0-predict/profile.json"]
use = shell
reporter = text
basals = monitor/active-basal-profile.json
settings = monitor/settings.json
bg-targets = monitor/bg-targets.json
device = get-profile
isf = monitor/insulin-sensitivities.json
max-iob = max_iob.json

[device "calculate-iob"]
fields = history profile clock
cmd = calculate-iob
vendor = openaps.vendors.process
args = 

[report "oref0-predict/iob.json"]
profile = oref0-predict/profile.json
use = shell
clock = monitor/clock.json
reporter = text
device = iob
history = monitor/pump-history.json

[device "determine-basal"]
fields = iob current-temps glucose profile
cmd = oref0
vendor = openaps.vendors.process
args = determine-basal

[report "oref0-predict/oref0.json"]
profile = oref0-predict/profile.json
use = shell
reporter = text
current-temps = monitor/temp-basal-status.json
device = determine-basal
iob = oref0-predict/iob.json
glucose = monitor/glucose.json

[device "ns-glucose"]
fields = 
cmd = bash -c
vendor = openaps.vendors.process
args = (curl -s bewest.labs.diabetes.watch/api/v1/entries.json"?type=sgv" | json   -e "this.glucose = this.sgv"  )

[device "curl"]
fields = 
cmd = bash
vendor = openaps.vendors.process
args = -c "curl -s bewest.labs.diabetes.watch/api/v1/entries.json | json -e 'this.glucose = this.sgv'"

[report "monitor/ns-glucose.json"]
device = curl
use = shell
reporter = text

[report "monitor/glucose.json"]
device = dx-format-oref0-glucose
use = shell
reporter = JSON
json_default = True
input = monitor/share-glucose-zoned.json
remainder = []

[report "oref0-predict/enacted.json"]
device = pump
input = oref0-predict/oref0.json
use = set_temp_basal
reporter = JSON

[device "oref0"]
vendor = openaps.vendors.process
extra = oref0.ini

[device "pump"]
vendor = openaps.vendors.medtronic
extra = blue.ini

[report "model.json"]
device = pump
use = model
reporter = JSON

[device "units"]
vendor = openaps.vendors.units
extra = units.ini

[device "get-profile"]
vendor = openaps.vendors.process
extra = get-profile.ini

[vendor "openapscontrib.predict"]
path = .
module = openapscontrib.predict

[device "predict"]
vendor = openapscontrib.predict
extra = predict.ini

[vendor "openapscontrib.timezones"]
path = .
module = openapscontrib.timezones

[device "tz"]
vendor = openapscontrib.timezones
extra = tz.ini

[report "monitor/pump-history-zoned.json"]
use = rezone
reporter = JSON
date = timestamp dateString start_at end_at created_at
adjust = missing
input = monitor/pump-history.json
device = tz
timezone = None
astimezone = True

[report "01.prepare/mm-resolved-zoned.json"]
use = rezone
reporter = JSON
date = timestamp dateString start_at end_at created_at
adjust = missing
input = 01.prepare/mm-resolved.json
device = tz
timezone = None
astimezone = True

[report "01.prepare/predicted.json"]
use = glucose
settings = monitor/settings.json
reporter = JSON
carb_ratios = monitor/carb-ratios.json
pump-history = 01.prepare/mm-resolved-zoned.json
device = predict
insulin_sensitivities = monitor/insulin-sensitivities.json
glucose = monitor/glucose.json

[device "ns-upload"]
vendor = openaps.vendors.process
extra = ns-upload.ini

[device "latest-treatments"]
vendor = openaps.vendors.process
extra = latest-treatments.ini

[device "cat"]
vendor = openaps.vendors.process
extra = cat.ini

[device "format-latest-nightscout-treatments"]
vendor = openaps.vendors.process
extra = format-latest-nightscout-treatments.ini

[report "reporting/latest-treatments.json"]
device = format-latest-nightscout-treatments
use = shell
json_default = True
reporter = JSON
remainder = []

[vendor "openxshareble"]
path = .
module = openxshareble

[device "share"]
vendor = openxshareble
extra = share.ini

[report "monitor/share-glucose.json"]
device = share
hours = 3.0
use = iter_glucose_hours
reporter = JSON

[report "monitor/share-glucose-zoned.json"]
use = rezone
reporter = JSON
astimezone = False
date = timestamp dateString start_at end_at created_at system_time display_time
adjust = missing
input = monitor/share-glucose.json
device = tz
timezone = PST

[device "dx-format-oref0-glucose"]
vendor = openaps.vendors.process
extra = dx-format-oref0-glucose.ini

